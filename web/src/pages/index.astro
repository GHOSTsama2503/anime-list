---
import Layout from "../layouts/Layout.astro";
import NavbarSection from "../components/sections/NavbarSection.astro";
import CardTemplate from "../components/CardTemplate.astro";
import Loading from "../components/Loading.astro";
import Paginator from "../components/sections/PaginatorSection.astro";
import AnimesSection from "../components/sections/AnimesSection.astro";
import FooterSection from "../components/sections/FooterSection.astro";
---

<Layout lang="en" title="Anime List">
	<NavbarSection />
	<Paginator />
	<AnimesSection />
	<Loading />
	<CardTemplate />
	<FooterSection />

	<script>
		type LimitAndOffset = { limit: number; offset: number };

		function getLimitAndOffset(): LimitAndOffset {
			const result: LimitAndOffset = {
				limit: 0,
				offset: 0,
			};

			const limit: HTMLSelectElement | null = document.querySelector(
				"limit-selector select",
			);

			if (limit === null) {
				throw new Error("limit selector not found");
			}

			result.limit = parseInt(limit.value);
			if (isNaN(result.limit)) {
				throw new Error("limit is not a number");
			}

			const queryParams = new URLSearchParams(window.location.search);

			let offsetValue = 0;

			const offset = queryParams.get("offset");
			if (offset !== null) {
				const parsedOffset = parseInt(offset);

				if (!isNaN(parsedOffset)) {
					offsetValue = parsedOffset;
				}
			}

			result.offset = offsetValue;

			return result;
		}

		const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));

		async function getAnimes() {
			const { limit, offset } = getLimitAndOffset();

			const url = `/api/animes?limit=${limit}&offset=${offset}`;
			let res = await fetch(url);

			while (!res.ok) {
				await sleep(500);
				res = await getAnimes();
			}

			return res;
		}

		let response = getAnimes();

		function notFound(message: string) {
			console.error(`Unexpected template content, not found ${message}`);
		}

		const loading = document.querySelector(
			"#loading",
		) as HTMLHeadingElement;

		const container = document.querySelector(
			"#container",
		) as HTMLDivElement;

		const template = document.querySelector(
			"#template",
		) as HTMLTemplateElement;

		type Anime = {
			id: number;
			id_al: number;
			title: { romaji: string; native: string; english: string };
			description: string;
			image: string;
			st_image: string;
		};

		let data = await response;
		let animes: Anime[] = (await data.json())?.animes;

		loading.remove();

		const animesLenght = animes.length;
		for (let i = 0; i < animesLenght; i++) {
			const element = template.content.cloneNode(true) as HTMLDivElement;
			const anime = animes[i];

			const img = element.querySelector("img");
			if (img != null) {
				img.src = `/img/${anime.id_al}`;
				img.alt = "Banner of " + anime.title;
			} else {
				notFound("img");
			}

			const link = `/anime?id=${anime.id}`;

			const imageLink: HTMLAnchorElement | null =
				element.querySelector(".image-link");
			if (imageLink != null) {
				imageLink.href = link;
			}

			const titleLink: HTMLAnchorElement | null =
				element.querySelector(".title-link");
			if (titleLink != null) {
				titleLink.href = link;
			}

			const title = element.querySelector("h4");
			if (title != null) {
				title.textContent = anime.title.romaji;
			} else {
				notFound("h4");
			}

			const description = element.querySelector("p");
			if (description != null) {
				description.textContent = anime.description;
			} else {
				notFound("p");
			}

			container.appendChild(element);
		}

		function goTo(limit: number, offset: number) {
			window.location.href =
				window.location.origin + `?limit=${limit}&offset=${offset}`;
		}

		function prev() {
			const { limit, offset } = getLimitAndOffset();
			if (offset >= 10) {
				goTo(limit, offset - limit);
			}
		}

		function next() {
			const { limit, offset } = getLimitAndOffset();

			goTo(limit, offset + limit);
		}
	</script>
</Layout>
