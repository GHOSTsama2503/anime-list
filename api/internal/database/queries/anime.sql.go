// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createAnime = `-- name: CreateAnime :one
INSERT INTO animes (
    id_al,
    title_romaji,
    title_native,
    title_english,
    format,
    status,
    description,
    start_date,
    end_date,
    season,
    season_year,
    episodes,
    duration,
    banner_image,
    st_image
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15
)
RETURNING id, id_al, title_romaji, title_native, title_english, format, status, description, start_date, end_date, season, season_year, episodes, duration, banner_image, st_image
`

type CreateAnimeParams struct {
	IDAl         int32
	TitleRomaji  string
	TitleNative  sql.NullString
	TitleEnglish sql.NullString
	Format       string
	Status       string
	Description  string
	StartDate    time.Time
	EndDate      time.Time
	Season       string
	SeasonYear   sql.NullInt16
	Episodes     int16
	Duration     int16
	BannerImage  sql.NullString
	StImage      string
}

func (q *Queries) CreateAnime(ctx context.Context, arg CreateAnimeParams) (Anime, error) {
	row := q.db.QueryRowContext(ctx, createAnime,
		arg.IDAl,
		arg.TitleRomaji,
		arg.TitleNative,
		arg.TitleEnglish,
		arg.Format,
		arg.Status,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Season,
		arg.SeasonYear,
		arg.Episodes,
		arg.Duration,
		arg.BannerImage,
		arg.StImage,
	)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.IDAl,
		&i.TitleRomaji,
		&i.TitleNative,
		&i.TitleEnglish,
		&i.Format,
		&i.Status,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Season,
		&i.SeasonYear,
		&i.Episodes,
		&i.Duration,
		&i.BannerImage,
		&i.StImage,
	)
	return i, err
}

const getAnimes = `-- name: GetAnimes :many
SELECT id, id_al, title_romaji, title_native, title_english, format, status, description, start_date, end_date, season, season_year, episodes, duration, banner_image, st_image FROM animes
LIMIT $1
OFFSET $2
`

type GetAnimesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetAnimes(ctx context.Context, arg GetAnimesParams) ([]Anime, error) {
	rows, err := q.db.QueryContext(ctx, getAnimes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.IDAl,
			&i.TitleRomaji,
			&i.TitleNative,
			&i.TitleEnglish,
			&i.Format,
			&i.Status,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Season,
			&i.SeasonYear,
			&i.Episodes,
			&i.Duration,
			&i.BannerImage,
			&i.StImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
