// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: genres.sql

package queries

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one
INSERT INTO genres (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, createGenre, name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres
WHERE id = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, id)
	return err
}

const getGenre = `-- name: GetGenre :one
SELECT id, name FROM genres
WHERE id = $1
`

func (q *Queries) GetGenre(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenre, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateGenre = `-- name: UpdateGenre :one
UPDATE genres
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateGenreParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenre, arg.ID, arg.Name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
