// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cover_image.sql

package queries

import (
	"context"
	"database/sql"
)

const createCoverImage = `-- name: CreateCoverImage :one
INSERT INTO cover_images (anime_id, extra_large, large, medium, color)
VALUES (?, ?, ?, ?, ?)
RETURNING id, anime_id, extra_large, large, medium, color
`

type CreateCoverImageParams struct {
	AnimeID    int64
	ExtraLarge sql.NullString
	Large      sql.NullString
	Medium     sql.NullString
	Color      sql.NullString
}

func (q *Queries) CreateCoverImage(ctx context.Context, arg CreateCoverImageParams) (CoverImage, error) {
	row := q.db.QueryRowContext(ctx, createCoverImage,
		arg.AnimeID,
		arg.ExtraLarge,
		arg.Large,
		arg.Medium,
		arg.Color,
	)
	var i CoverImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ExtraLarge,
		&i.Large,
		&i.Medium,
		&i.Color,
	)
	return i, err
}

const deleteCoverImage = `-- name: DeleteCoverImage :exec
DELETE FROM cover_images
WHERE id = ?
`

func (q *Queries) DeleteCoverImage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoverImage, id)
	return err
}

const deleteCoverImageByAnimeId = `-- name: DeleteCoverImageByAnimeId :exec
DELETE FROM cover_images
WHERE anime_id = ?
`

func (q *Queries) DeleteCoverImageByAnimeId(ctx context.Context, animeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCoverImageByAnimeId, animeID)
	return err
}
