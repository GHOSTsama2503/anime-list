// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package queries

import (
	"context"
)

const adminExists = `-- name: AdminExists :one
SELECT COUNT(is_admin) FROM users
`

func (q *Queries) AdminExists(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, adminExists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUser = `-- name: CheckUser :many
SELECT id, username, password, is_admin FROM users
WHERE username = ? AND password = ?
`

type CheckUserParams struct {
	Username string
	Password string
}

func (q *Queries) CheckUser(ctx context.Context, arg CheckUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, checkUser, arg.Username, arg.Password)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, is_admin)
VALUES (?, ?, ?)
RETURNING id, username, password, is_admin
`

type CreateUserParams struct {
	Username string
	Password string
	IsAdmin  int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.IsAdmin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :many
SELECT id, username, password, is_admin FROM users
WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :many
SELECT id, username, password, is_admin FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
